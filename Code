`timescale 1ns / 1ps

module uart(
    input clk, // The master clock for this module
    input rst, // Synchronous reset.
    input rx, // Incoming serial line
    output tx, // Outgoing serial line
    input clk_dtv, // the clock from digital TV subsystem
    input clk_stg, // the clock from stage subsystem
    input [7:0] stg_byte, // input data from stage (8 bits)
    input [3:0] dtv_byte, // input data from digital tv (4 bits)
    output received, // Indicated that a byte has been received.
    output wire [7:0] rx_byte_stg, // Byte received (Stage)
    output wire [3:0] rx_byte_dtv, // Byte received (digital TV)
output buffer, // give TV signal to buffer data
    output clk_stg_o, // clk from stage
    output clk_dtv_o, // clk from digital TV
    );
 
parameter CLOCK_DIVIDE = 500; 
 
// States for the receiving state machine.
// These are just constants, not parameters to override.
parameter RX_IDLE = 0;
parameter RX_CHECK_START = 1;
parameter RX_READ_BITS = 2;
parameter RX_CHECK_STOP = 3;
parameter RX_SEND = 4;
parameter RX_DELAY_RESTART = 5;
parameter RX_ERROR = 6;
parameter RX_reset = 7;
 
// States for the transmitting state machine.
// Constants - do not override.
parameter TX_IDLE = 0;
parameter TX_SENDING = 1;
parameter TX_DELAY_RESTART = 2;
reg [8:0] tx_byte;
reg [10:0] rx_clk_divider = CLOCK_DIVIDE;
reg [10:0] tx_clk_divider = CLOCK_DIVIDE;
reg clk_stg_o;
reg clk_dtv_o;
reg [2:0] recv_state = RX_IDLE;
reg [5:0] rx_countdown;
reg [3:0] rx_bits_remaining;
reg [8:0] rx_data;
reg flag_for_rx_stg;
reg flag_for_rx_dtv;
reg tx_out = 1'b1;
reg [1:0] tx_state = TX_IDLE;
reg [5:0] tx_countdown;
reg [3:0] tx_bits_remaining;
reg [8:0] tx_data;
reg st_pre = 0;
reg tv_pre = 0;
reg buffer = 0;
//reg [7:0] rx_byte;
integer counter = 0;
reg [3:0] rx_data_tv;
reg [7:0] rx_data_st;
//assign received = recv_state == RX_RECEIVED;
//assign recv_error = recv_state == RX_ERROR;
//assign is_receiving = recv_state != RX_IDLE;

//assign rx_byte = flag_for_rx? rx_data :8'b00000000;// rx_data;
assign rx_byte_dtv = flag_for_rx_dtv? rx_data_tv :4'b0000;
assign rx_byte_stg = flag_for_rx_stg? rx_data_st :8'b00000000;
reg transmit;
assign tx = tx_out;
assign is_transmitting = tx_state != TX_IDLE;
wire [8:0] TVD;
assign TVD = {1'b0,dtv_byte[3:0],4'b0000};
wire [8:0] STD;
assign STD = {1'b1,stg_byte[7:0]};  
reg [8:0] buffer_st;
reg buffer_ct = 0;
//default: st_pre = 0;
  //tv_pre = 0;
  //order = 0;
  //buffer_ct = 0;
  //counter = 0;
//end
  
always @(posedge clk) begin
        if (rst) begin
  recv_state = RX_IDLE;
  tx_state = TX_IDLE;
 end
        st_pre <= clk_stg;
        tv_pre <= clk_dtv;
        if(clk_stg == 1 && st_pre == 0 && tx_state == TX_IDLE) begin
                 transmit = 1;
                 tx_byte = STD;
                 buffer = 0;
        end else if(clk_stg ==1 && st_pre == 0 && tx_state != TX_IDLE) begin
                 buffer_st = STD;
                 buffer_ct = 1;
                 buffer = 0;
        end else if (buffer_ct) begin
                 tx_byte = buffer_st;
                 transmit = 1;
                 buffer_ct = 0;
                 buffer = 0;
        end else if (clk_dtv == 1 && tv_pre == 0 && tx_state == TX_IDLE) begin
                 tx_byte = TVD;
                 buffer = 1;
                 transmit = 1;
        end else begin
                 transmit = 0;  
                 buffer = 0;     
        end
 // The clk_divider counter counts down from
 // the CLOCK_DIVIDE constant. Whenever it
 // reaches 0, 1/16 of the bit period has elapsed.
   // Countdown timers for the receiving and transmitting state machines are decremented.
 // 
 tx_clk_divider = tx_clk_divider - 1;
 if (!tx_clk_divider) begin
  tx_clk_divider = CLOCK_DIVIDE;
  tx_countdown = tx_countdown - 1;
 end
 rx_clk_divider = rx_clk_divider - 1;
 if (!rx_clk_divider) begin
  rx_clk_divider = CLOCK_DIVIDE;
  rx_countdown = rx_countdown - 1;
 end
 
 // Receive state machine
 case (recv_state)
  RX_IDLE: begin
   // A low pulse on the receive line indicates the
   // start of data.
   if (!rx) begin
   
    // Wait half the period - should resume in the
    // middle of this first pulse.
    rx_clk_divider = CLOCK_DIVIDE;
    rx_countdown = 2;
    recv_state = RX_CHECK_START;
                                counter = 0;
                                clk_stg_o = 0;
                                clk_dtv_o = 0;

                               
   end
  end
  RX_CHECK_START: begin
   if (!rx_countdown) begin
    // Check the pulse is still there
    if (!rx) begin
     // Pulse still there - good
     // Wait the bit period to resume half-way
     // through the first bit.
     rx_countdown = 4;
     rx_bits_remaining = 9;
     recv_state = RX_READ_BITS;
    end else begin
     // Pulse lasted less than half the period -
     // not a valid transmission.
     recv_state = RX_ERROR;
    end
   end
  end
  RX_READ_BITS: begin
   if (!rx_countdown) begin
    // Should be half-way through a bit pulse here.
    // Read this bit in, wait for the next if we
    // have more to get.
    rx_data[counter] = rx;
    rx_countdown = 4;
    rx_bits_remaining = rx_bits_remaining - 1;
                                counter = counter +1;
    recv_state = rx_bits_remaining ? RX_READ_BITS : RX_CHECK_STOP;
   end
  end
  RX_CHECK_STOP: begin
   if (!rx_countdown) begin
    // Should resume half-way through the stop bit
    // This should be high - if not, reject the
    // transmission and signal an error.
    recv_state = rx ? RX_SEND : RX_ERROR;
                                rx_countdown = 4;
   end
  end
                RX_SEND: begin
                       if (rx_data[8]) begin
                         rx_data_st = rx_data[7:0];
                        //rx_byte[7:0] = rx_data[7:0];
    flag_for_rx_stg = 1;
                                               
                         //recv_state = RX_RECEIVED;
                       end else begin
                         rx_data_tv = rx_data[7:4];
                         flag_for_rx_dtv = 1;
                        
                         //recv_state = RX_RECEIVED;
                       end
                       if (flag_for_rx_stg == 1 && rx_countdown == 2) begin
                         clk_stg_o = 1;
                       end else if (flag_for_rx_dtv == 1 && rx_countdown == 2) begin
                         clk_dtv_o = 1;
                       end
                      recv_state = rx_countdown? RX_SEND: RX_reset;
                end 
                        
  RX_DELAY_RESTART: begin
   // Waits a set number of cycles before accepting
   // another transmission.
   recv_state = rx_countdown ? RX_DELAY_RESTART : RX_IDLE;
  end
  RX_ERROR: begin
   // There was an error receiving.
   // Raises the recv_error flag for one clock
   // cycle while in this state and then waits
   // 2 bit periods before accepting another
   // transmission.
   rx_countdown = 8;
                        
   recv_state = RX_DELAY_RESTART;
  end
               RX_reset: begin
                        flag_for_rx_dtv = 0;
                        flag_for_rx_stg = 0;
                        recv_state = RX_IDLE;
                       
               end
 endcase
 
 // Transmit state machine
 case (tx_state)
  TX_IDLE: begin
   if (transmit) begin
    // If the transmit flag is raised in the idle
    // state, start transmitting the current content
    // of the tx_byte input.
    tx_data = tx_byte;
    // Send the initial, low pulse of 1 bit period
    // to signal the start, followed by the data
    tx_clk_divider = CLOCK_DIVIDE;
    tx_countdown = 4;
    tx_out = 0;
                                transmit = 0;

    tx_bits_remaining = 9;
    tx_state = TX_SENDING;
   end
  end
  TX_SENDING: begin
   if (!tx_countdown) begin
    if (tx_bits_remaining) begin
     tx_bits_remaining = tx_bits_remaining - 1;
     tx_out = tx_data[0];
     tx_data = {1'b0, tx_data[8:1]};
     tx_countdown = 4;
     tx_state = TX_SENDING;
    end else begin
     // Set delay to send out 2 stop bits.
     tx_out = 1;
     tx_countdown = 8;
     tx_state = TX_DELAY_RESTART;
    end
   end
  end
  TX_DELAY_RESTART: begin
   // Wait until tx_countdown reaches the end before
   // we send another transmission. This covers the
   // "stop bit" delay.
   tx_state = tx_countdown ? TX_DELAY_RESTART : TX_IDLE;
                  
  end
 endcase
end
 
endmodul

